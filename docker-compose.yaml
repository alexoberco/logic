services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: baseTaller
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always

  db_init:
    image: postgres:latest
    depends_on:
      - db
    environment:
      PGPASSWORD: admin
    entrypoint:
      - sh
      - -c
      - |
        # Esperar a que Postgres acepte conexiones
        until pg_isready -h db -p 5432; do
          echo "Waiting for postgres..."
          sleep 1
        done
        
        # Inserciones idempotentes: solo se crean si NO existen
        psql -h db -U admin -d baseTaller -c "INSERT INTO product(name, stock, status) SELECT 'Producto 1',100,'available' WHERE NOT EXISTS (SELECT 1 FROM product WHERE name='Producto 1');"
        psql -h db -U admin -d baseTaller -c "INSERT INTO product(name, stock, status) SELECT 'Producto 2',100,'available' WHERE NOT EXISTS (SELECT 1 FROM product WHERE name='Producto 2');"
        psql -h db -U admin -d baseTaller -c "INSERT INTO product(name, stock, status) SELECT 'Producto 3',100,'available' WHERE NOT EXISTS (SELECT 1 FROM product WHERE name='Producto 3');"
    restart: no

  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"     # para conexiones AMQP
      - "15672:15672"   # para la consola de administraci√≥n web
    restart: always


  quarkus-app:
    build:
      context: ./
      dockerfile: src/main/docker/Dockerfile.jvm
    image: order-service:latest
    ports:
      - "8080:8080"   # expone 8080 en localhost
    expose:
      - "8080"        # para la red interna de Docker
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/baseTaller
      QUARKUS_DATASOURCE_USERNAME: admin
      QUARKUS_DATASOURCE_PASSWORD: admin
      QUARKUS_RABBITMQ_HOST: rabbitmq
      QUARKUS_RABBITMQ_PORT: "5672"
    depends_on:
      - db
      - rabbitmq

  adminer:
    image: adminer
    ports:
      - "8081:8080"
    restart: always

volumes:
  pgdata:


